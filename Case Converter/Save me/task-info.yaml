type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    const hs = require('hs-test-web');
    const fs = require("fs");
    const rimraf = require("rimraf");

    const workingDir = path.resolve(__dirname, '../src');
    const pagePath = 'file://' + path.resolve(__dirname, workingDir + '/index.html');


    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);
        await page._client.send('Page.setDownloadBehavior', {
            behavior: 'allow',
            downloadPath: workingDir + path.sep + "downloads"
        });

        page.on('console', msg => console.log(msg.text()));

        await sleep(1000);

        rimraf.sync(workingDir + '/downloads');

        let result = await hs.testPage(page,
            // Test #1
            () => {
                const nodes = document.getElementsByClassName("title");

                if (nodes.length !== 1) {
                    return hs.wrong("There should be one element with class 'title', found " + nodes.length + "!")
                }

                const titleDiv = nodes[0];

                if (titleDiv.textContent !== 'Case Converter') {
                    return hs.wrong("The title name should be 'Case Converter', but found " + titleDiv.textContent.trim())
                }

                return hs.correct()
            },

            // Test #2
            () => {
                const nodes = document.getElementsByTagName("textarea");

                if (nodes.length !== 1) {
                    return hs.wrong("There should be one 'textarea' element, found " + nodes.length + "!")
                }

                this.textArea = nodes[0];

                if (this.textArea.textContent.trim() !== '') {
                    return hs.wrong("TextArea should be empty by default!")
                }

                return hs.correct()
            },

            // Test #3
            () => {
                this.upperCaseButton = document.querySelector("button#upper-case")
                this.lowerCaseButton = document.querySelector("button#lower-case")
                this.properCaseButton = document.querySelector("button#proper-case")
                this.sentenceCaseButton = document.querySelector("button#sentence-case")
                this.saveTextFileButton = document.querySelector("button#save-text-file")

                if (this.upperCaseButton === null) {
                    return hs.wrong("Can't find a button with '#upper-case' id!")
                }

                if (this.lowerCaseButton === null) {
                    return hs.wrong("Can't find a button with '#lower-case' id!")
                }

                if (this.properCaseButton === null) {
                    return hs.wrong("Can't find a button with '#proper-case' id!")
                }

                if (this.sentenceCaseButton === null) {
                    return hs.wrong("Can't find a button with '#sentence-case' id!")
                }

                if (this.saveTextFileButton === null) {
                    return hs.wrong("Can't find a button with '#save-text-file' id!")
                }

                return hs.correct()
            },

            // Test #4
            () => {

                this.textArea.value = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const upperCaseText = 'LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY.' +
                    ' LOREM IPSUM HAS BEEN THE INDUSTRY\'S STANDARD DUMMY TEXT EVER SINCE THE 1500S,' +
                    ' WHEN AN UNKNOWN PRINTER TOOK A GALLEY OF TYPE AND SCRAMBLED IT TO MAKE A TYPE SPECIMEN BOOK.'

                this.upperCaseButton.click()

                if (this.textArea.value !== upperCaseText) {
                    return hs.wrong("After clicking on 'Upper Case' button your text is wrong!")
                }

                const lowerCaseText = 'lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.lowerCaseButton.click()

                if (this.textArea.value !== lowerCaseText) {
                    return hs.wrong("After clicking on 'Lower Case' button your text is wrong!")
                }

                const properCase = 'Lorem Ipsum Is Simply Dummy Text Of The Printing And Typesetting Industry.' +
                    ' Lorem Ipsum Has Been The Industry\'s Standard Dummy Text Ever Since The 1500s,' +
                    ' When An Unknown Printer Took A Galley Of Type And Scrambled It To Make A Type Specimen Book.'

                this.properCaseButton.click()

                if (this.textArea.value !== properCase) {
                    return hs.wrong("After clicking on 'Proper Case' button your text is wrong!")
                }

                const sentenceCase = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.sentenceCaseButton.click()

                if (this.textArea.value !== sentenceCase) {
                    return hs.wrong("After clicking on 'Sentence Case' button your text is wrong!")
                }

                return hs.correct()
            },

            // Test #5
            async () => {
                this.saveTextFileButton.click()

                const delay = ms => new Promise(res => setTimeout(res, ms));
                await delay(2000);

                return hs.correct()
            }
        );

        if (result['type'] === 'wrong') {
            await browser.close();
            return result;
        }

        result = await hs.test(
            () => {

                const correctTextFileContent = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const filePath = workingDir + `${path.sep}downloads${path.sep}text.txt`;

                if (!fs.existsSync(filePath)) {
                    return hs.wrong("Looks like you didn't download a text file named 'text.txt', after clicking on 'Save Text File' button")
                }

                let fileContent = fs.readFileSync(filePath, "utf8");

                if (fileContent !== correctTextFileContent) {
                    return hs.wrong("Content of downloaded file is wrong!")
                }

                return hs.correct()
            }
        )

        rimraf.sync(workingDir + '/downloads');

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/main.js
  visible: true
  text: |-
    document.getElementById("upper-case").onclick = convertToUpper;
    document.getElementById("lower-case").onclick = convertToLower;
    document.getElementById("proper-case").onclick = convertToProper;
    document.getElementById("sentence-case").onclick = convertToSentence;


    function convertToUpper(){
        console.log("Convert to upper case");

        let textArea = document.getElementById("input-text");
        let inputString = textArea.value;

        console.log(inputString);

        inputString = inputString.toUpperCase();

        console.log(inputString);

        textArea.value = inputString;
    }

    function convertToLower(){
        console.log("Convert to lower case");

        let textArea = document.getElementById("input-text");
        let inputString = textArea.value;

        console.log(inputString);

        inputString = inputString.toLowerCase();

        console.log(inputString);

        textArea.value = inputString;
    }

    function convertToProper(){
        console.log("Covert to proper case");

        let textArea = document.getElementById("input-text");
        let inputString = textArea.value;

        console.log(inputString);

        inputString = inputString.toLowerCase().split(' ').map(function (word){
            return word.length === 0 ? word : word.replace(word[0], word[0].toUpperCase());
        }).join(' ');

        console.log(inputString);

        textArea.value = inputString;
    }

    function convertToSentence(){
        console.log("Convert to sentence case");

        let textArea = document.getElementById("input-text");
        let inputString = textArea.value;

        console.log(inputString);

        inputString = inputString.toLowerCase().replace(/(^\s*\w|[.!?]\s*\w)/g,function(c){return c.toUpperCase()});

        console.log(inputString);

        textArea.value = inputString;
    }
  learner_created: true
- name: src/style.css
  visible: true
  text: |-
    .flex-container{
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    .title{
        font-family: Helvetica, sans-serif;
        margin-bottom: 10px;
        font-size: 28px;
    }

    .txt-button{
        background-color: navajowhite;
        border: none;
        padding: 14px 30px;
        margin-bottom: 10px;
        margin-right: 10px;
        font-size: 14px;
        transition-duration: 0.2s;
    }

    .txt-button:hover{
        background-color: antiquewhite;
    }

    .input-container{
        width: 80%;
        min-height: 300px;
        margin-bottom: 10px;
    }

    #input-text{
        width: inherit;
        height: inherit;
        min-height: inherit;
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/14001#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 08 Feb 2022 14:59:25 UTC
record: -1
